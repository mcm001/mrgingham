name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-host:
    env:
      MACOSX_DEPLOYMENT_TARGET: 11
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch-name: windowsx86-64
          - os: macos-12
            arch-name: osxuniversal
          - os: ubuntu-latest
            arch-name: linuxx86-64

    runs-on: ${{ matrix.os }}
    name: "Libapriltag - Build - ${{ matrix.arch-name }}"

    steps:
    - uses: actions/checkout@v3

    - name: Install Java 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: temurin

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.13

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOPENCV_ARCH=${{ matrix.arch-name }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} ${{ (startsWith(matrix.arch-name, 'windowx86-64') && '--config Release') || '' }} -j

    - uses: actions/upload-artifact@master
      with:
        name: libmrgingham-${{ matrix.arch-name }}
        path: |
          build/*.so
          build/*.dylib
          build/*.dll

  build-raspi:
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v3
    - uses: pguyot/arm-runner-action@v2
      with:
        base_image: raspios_lite_arm64:latest
        cpu: cortex-a7
        image_additional_mb: 2500
        bind_mount_repository: true
        commands: |
          sudo apt update
          sudo apt -y upgrade
          sudo apt install cmake build-essential default-jdk git -y
          cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOPENCV_ARCH=linuxarm64
          cmake --build build --config ${{env.BUILD_TYPE}} -j
          find .

    - uses: actions/upload-artifact@v3
      name: Upload image
      with:
        name: libmrgingham-pi
        path: ${{github.workspace}}/build/*.so



  release:
    needs: [build-host, build-raspi]
    runs-on: ubuntu-22.04
    steps:
      # Download literally every single artifact. This also downloads client and docs,
      # but the filtering below won't pick these up (I hope)
      - uses: actions/download-artifact@v2

      - run: find

      # Push to dev release on pushes to master
      - uses: pyTooling/Actions/releaser@r0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'Dev'
          rm: true
          files: |
            ${{github.workspace}}/build/*.dll
            ${{github.workspace}}/build/*.so
            ${{github.workspace}}/build/*.dylib
        if: github.event_name == 'push'

      # Push to actual release, if tagged
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{github.workspace}}/build/*.dll
            ${{github.workspace}}/build/*.so
            ${{github.workspace}}/build/*.dylib
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
